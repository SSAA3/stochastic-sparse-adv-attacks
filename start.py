"""
Arguments
--cuda_device ['cuda', 'cpu']
--job ['attack', 'performances', 'visualization']
--attack ['FGA', 'VFGA', 'UA']
--dataset ['ImageNet', 'CIFAR10']
--model ['inception_v3', 'vgg16'] when the dataset is ImageNet
        ['resnet18', 'vgg19'] when the dataset if CIFAR10
--sampling int 
--batch_size int
--max_batch int
--image_choice ['best', 'worst', 'random']
"""


import os
import torch
import random
import argparse
import pandas as pd
import numpy as np

from data.load_data import Load_DataSet
from attack.utils import model_with_softmax, model_with_normalization


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--cuda_device', type=str, default='cpu', help='specifies CUDA device')
    parser.add_argument('--job', type=str, default='attack', help='specifies the action to run')
    parser.add_argument('--attack', type=str, default='VFGA', help='choice of attack : FGA, VFGA or UA')
    parser.add_argument('--targeted', action='store_true')
    parser.add_argument('--dataset', type=str, default='CIFAR10', help='dataset used')
    parser.add_argument('--model', type=str, default='vgg19', help='model used')
    parser.add_argument('--sampling', type=int, default=10, help='size of the gaussian sample')
    parser.add_argument('--batch_size', type=int, default=5, help='input batch size')
    parser.add_argument('--max_batch', type=int, default=1, help='stop code running after max_batch')
    parser.add_argument('--image_choice', type=str, default='best', help='choice of the image to visualize')
    parser.add_argument('--seed', type=int, default=1, help='random seed')

    args = parser.parse_args()
    
    random.seed(args.seed)
    torch.manual_seed(args.seed)
    np.random.seed(args.seed)
    if (args.cuda_device=='cuda'):
        torch.backends.cudnn.benchmark=True
        torch.backends.cudnn.deterministic = True
        torch.cuda.device(args.cuda_device)
        torch.cuda.manual_seed(args.seed)
        
    
    DataClass = Load_DataSet(args.batch_size, args.cuda_device)    
    mean, std, max_iter, nb_classes = DataClass.param_dataset(args.dataset)
    
    param_attack = {'data': args.dataset, 'mean': mean, 'std': std, 'max_iter': max_iter, 'batchsize':args.batch_size, 'nb_classes': nb_classes}
    
    targeted_arg = 'targeted' if args.targeted else 'untargeted'
    
    # Create the folder relating to the chosen parameters if it does not exist
    if not os.path.exists('results_{}_{}/'.format(args.attack, targeted_arg)):
        os.mkdir('results_{}_{}/'.format(args.attack, targeted_arg))

    path = os.path.join('results_{}_{}'.format(args.attack, targeted_arg), '{}_{}'.format(args.dataset, args.model))
    if not os.path.exists(path):
        os.mkdir(path)

    path_sampling = os.path.join(path, 'sampling_{}'.format(args.sampling))
    if not os.path.exists(path_sampling):
        os.mkdir(path_sampling)
    
    
    # Generate adversarial samples
    if args.job == 'attack' :

        from attack.generate_attacks import generate_attacks
        
        print('\n {} - {} generates adversarial samples...\n'.format(args.attack, targeted_arg))
               
        dataset_loader = DataClass.dataset_loader(args.dataset, args.model)
        
        model = DataClass.load_model(args.dataset, args.model, job='attack').to(args.cuda_device)
        normalized_model = model_with_normalization(model, mean, std, args.cuda_device)
        model_softmax = model_with_softmax(normalized_model)
        
        param_attack['model_without'] = model
        
        generate_attacks(model_softmax, dataset_loader, attack_arg=args.attack, targeted_arg=args.targeted, sampling=args.sampling, 
                         max_batch=args.max_batch, device=args.cuda_device, path=path_sampling, **param_attack)
        
    
    # Compute performances
    elif args.job == 'performances':
        
        from performances.compute_performances import compute_performances
        
        print('\n Computing performances of {} - {}... \n'.format(args.attack, targeted_arg))
        
        compute_performances(arg_model=args.model, dataset=args.dataset, arg_attack=args.attack, targeted_arg=targeted_arg,
                             sampling=args.sampling, batch_size=args.batch_size, **param_attack)
        
    
    # Plot adversarial and original samples  
    elif args.job == 'visualization':
        
        from visualization.utils_visu import plot_samples
        
        print('\n Plotting adversarial samples generated by {} - {}... \n'.format(args.attack, targeted_arg))
        
        model = DataClass.load_model(args.dataset, args.model, job='visualization').to(args.cuda_device)
        normalized_model = model_with_normalization(model, mean, std, args.cuda_device)
        model_softmax = model_with_softmax(normalized_model)
        
        plot_samples(model_softmax, dataset=args.dataset, arg_model=args.model, image_choice=args.image_choice, 
                     path=path_sampling, device=args.cuda_device, **param_attack)
    
    
    else:
         raise ValueError("Invalid job argument")